<?php
set_time_limit (3000);

$dbhost="localhost";
$dbuname="root";
$dbupass="";
$dbname="temp";

$dbi = mysql_connect($dbhost, $dbuname, $dbupass,true) or die("Couldn't connect to database server!");
mysql_select_db($dbname, $dbi) or die("Q 200603201239"); 

//load up the table
$war_table = array();
for($a=0;$a<=11;$a++)
	for($v=0;$v<=11;$v++)
	{
		$get_query2 = "select c from war_balancer where a=$a and v=$v";
		$get_res2=mysql_query($get_query2,$dbi) or die(" Q200611231501411 ".mysql_error($dbi)." $get_query2 ");
		$row2=mysql_fetch_row($get_res2);
//echo $row2[0]."<br>";
		$war_table[$a][$v]=$row2[0];
	}
//calc values
$war_chances = array();

//from x500 only
/*
$PVP_forced_balancing_prev = array(
     array(0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000), 
     array(0.000, 0.000, 0.840, 0.502, 0.454, 0.528, 1.011, 0.791, 0.871, 0.535, 0.000, 0.539), 
     array(0.000, 1.159, 0.000, 1.104, 0.993, 1.042, 1.176, 0.916, 1.074, 0.794, 0.000, 1.507), 
     array(0.000, 1.497, 0.895, 0.000, 1.005, 1.038, 1.074, 0.955, 0.749, 1.000, 0.000, 0.934), 
     array(0.000, 1.545, 1.006, 0.994, 0.000, 0.691, 1.191, 1.113, 0.784, 0.723, 0.000, 1.007), 
     array(0.000, 1.471, 0.957, 0.961, 1.308, 0.000, 1.786, 1.060, 0.718, 1.000, 0.000, 0.772), 
     array(0.000, 0.988, 0.823, 0.925, 0.808, 0.213, 0.000, 0.925, 0.833, 0.934, 0.000, 1.000), 
     array(0.000, 1.208, 1.083, 1.044, 0.886, 0.940, 1.074, 0.000, 1.002, 0.764, 0.000, 0.894), 
     array(0.000, 1.128, 0.925, 1.250, 1.215, 1.281, 1.166, 0.997, 0.000, 1.049, 0.000, 1.165), 
     array(0.000, 1.464, 1.205, 1.000, 1.276, 1.000, 1.065, 1.235, 0.950, 0.000, 0.000, 1.181), 
     array(0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000), 
     array(0.000, 1.460, 0.492, 1.065, 0.992, 1.227, 0.999, 1.105, 0.835, 0.818, 0.000, 0.000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000),
);/**/

/*
$PVP_forced_balancing_prev = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 1.0523, 0.4664, 0.4430, 0.4541, 1.1727, 0.8294, 0.9837, 0.4411, 0.0000, 0.2885), 
     array(0.0000, 0.9476, 0.0000, 0.9825, 0.8898, 0.8797, 1.2786, 0.7919, 1.0413, 0.3791, 0.0000, 1.0756), 
     array(0.0000, 1.1335, 1.0174, 0.0000, 1.0269, 0.9861, 1.0986, 0.9157, 0.7834, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.1570, 1.1101, 0.9730, 0.0000, 0.4051, 1.1410, 1.3052, 0.9589, 0.3510, 0.0000, 0.9916), 
     array(0.0000, 1.1458, 1.1203, 1.0139, 1.1948, 0.0000, 1.1692, 1.0910, 0.8878, 0.8994, 0.0000, 0.6639), 
     array(0.0000, 0.8272, 0.7213, 0.9013, 0.4589, 0.8308, 0.0000, 0.7035, 0.8873, 0.7955, 0.0000, 0.8649), 
     array(0.0000, 1.1705, 1.2080, 1.0842, 0.6947, 0.5089, 1.2964, 0.0000, 0.8840, 0.8747, 0.0000, 0.8239), 
     array(0.0000, 1.0162, 0.9586, 1.2165, 1.0410, 1.1121, 1.1126, 1.1159, 0.0000, 0.8112, 0.0000, 0.8977), 
     array(0.0000, 1.1589, 1.2208, 0.0000, 1.2490, 1.1005, 1.2044, 1.1252, 1.1887, 0.0000, 0.0000, 1.1810), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.3114, 0.9243, 0.0000, 1.0083, 1.3360, 1.1350, 1.1760, 1.1022, 0.8180, 0.0000, 0.0000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, -0.200, -0.200, -0.200, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, -0.200), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, -0.200, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
);/**/
/*
$PVP_forced_balancing_prev = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 1.0523, 0.4664, 0.4912, 0.4541, 1.2215, 0.8639, 0.9901, 0.4411, 0.0000, 0.3332), 
     array(0.0000, 0.9477, 0.0000, 0.9825, 0.8722, 0.8797, 1.2669, 0.7919, 1.0112, 0.3791, 0.0000, 1.0756), 
     array(0.0000, 1.1335, 1.0174, 0.0000, 1.0269, 1.0429, 1.0986, 0.9477, 0.7834, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.1087, 1.1277, 0.9730, 0.0000, 0.4574, 1.1200, 1.2903, 0.8826, 0.3510, 0.0000, 0.9365), 
     array(0.0000, 1.1458, 1.1203, 0.9570, 1.1425, 0.0000, 1.1692, 1.1496, 0.8212, 0.8994, 0.0000, 0.6639), 
     array(0.0000, 0.7784, 0.7330, 0.9013, 0.4799, 0.8308, 0.0000, 0.6983, 0.8556, 0.7830, 0.0000, 0.8378), 
     array(0.0000, 1.1360, 1.2080, 1.0522, 0.7096, 0.4503, 1.3016, 0.0000, 0.9149, 0.8939, 0.0000, 0.8680), 
     array(0.0000, 1.0098, 0.9887, 1.2165, 1.1173, 1.1787, 1.1443, 1.0850, 0.0000, 0.8238, 0.0000, 0.8466), 
     array(0.0000, 1.1589, 1.2208, 0.0000, 1.2490, 1.1005, 1.2169, 1.1060, 1.1761, 0.0000, 0.0000, 1.2020), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.2667, 0.9243, 0.0000, 1.0634, 1.3360, 1.1621, 1.1319, 1.1533, 0.7979, 0.0000, 0.0000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, -0.200, -0.200, -0.200, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, -0.200), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, -0.200, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
);/**/
/*
$PVP_forced_balancing_prev = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 1.0553, 0.5497, 0.5257, 0.5522, 1.2945, 0.8531, 0.9420, 0.4321, 0.0000, 0.4244), 
     array(0.0000, 0.9446, 0.0000, 0.9825, 0.7964, 0.8463, 1.2724, 0.7889, 0.9952, 0.4273, 0.0000, 1.0832), 
     array(0.0000, 1.0503, 1.0175, 0.0000, 1.0035, 1.0324, 1.0924, 0.9477, 0.8190, 1.0000, 0.0000, 1.1547), 
     array(0.0000, 1.0742, 1.2035, 0.9964, 0.0000, 0.5545, 1.0833, 1.2801, 0.8749, 0.4468, 0.0000, 1.0535), 
     array(0.0000, 1.0477, 1.1536, 0.9675, 1.0454, 0.0000, 1.1925, 1.1398, 0.8530, 0.9655, 0.0000, 0.6797), 
     array(0.0000, 0.7054, 0.7275, 0.9075, 0.5166, 0.8074, 0.0000, 0.6773, 0.8482, 0.7804, 0.0000, 0.8161), 
     array(0.0000, 1.1468, 1.2110, 1.0523, 0.7198, 0.8601, 1.3226, 0.0000, 0.9266, 0.8939, 0.0000, 0.8680), 
     array(0.0000, 1.0579, 1.0048, 1.1809, 1.1250, 1.1469, 1.1517, 1.0733, 0.0000, 0.8434, 0.0000, 0.8420), 
     array(0.0000, 1.1678, 1.1726, 1.0000, 1.1531, 1.0344, 1.2195, 1.1061, 1.1565, 0.0000, 0.0000, 1.1703), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.1755, 0.9167, 0.8452, 0.9464, 1.3202, 1.1838, 1.1320, 1.1579, 0.8296, 0.0000, 0.0000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, -0.200, -0.200, -0.200, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, -0.200), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, -0.200, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
);/**/
/*
$PVP_forced_balancing_prev = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 1.0380, 0.5635, 0.4665, 0.5635, 1.3246, 0.8376, 0.9355, 0.4772, 0.0000, 0.4690), 
     array(0.0000, 0.9619, 0.0000, 0.9825, 0.7474, 0.7858, 1.2724, 0.8174, 0.9744, 0.4853, 0.0000, 1.0681), 
     array(0.0000, 1.0364, 1.0175, 0.0000, 0.9649, 1.0324, 1.1403, 0.9690, 0.8486, 0.9583, 0.0000, 1.1547), 
     array(0.0000, 1.1334, 1.2525, 1.0350, 0.0000, 0.4744, 1.1867, 1.3142, 0.9040, 0.5222, 0.0000, 1.0911), 
     array(0.0000, 1.0364, 1.2141, 0.9675, 1.1255, 0.0000, 1.2546, 1.1298, 0.9003, 0.9655, 0.0000, 0.6985), 
     array(0.0000, 0.6753, 0.7276, 0.8596, 0.4132, 0.7453, 0.0000, 0.6755, 0.8246, 0.7331, 0.0000, 0.8211), 
     array(0.0000, 1.1623, 1.1825, 1.0309, 0.6857, 0.8701, 1.3244, 0.0000, 0.9352, 0.8939, 0.0000, 0.8438), 
     array(0.0000, 1.0644, 1.0255, 1.1513, 1.0959, 1.0996, 1.1753, 1.0647, 0.0000, 0.8410, 0.0000, 0.7677), 
     array(0.0000, 1.1227, 1.1146, 1.0416, 1.0777, 1.0344, 1.2668, 1.1061, 1.1589, 0.0000, 0.0000, 1.1898), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.1310, 0.9318, 0.8452, 0.9088, 1.3014, 1.1788, 1.1561, 1.2322, 0.8101, 0.0000, 0.0000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, -0.200, -0.200, -0.200, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, -0.200), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, -0.200, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
);/**/
$PVP_forced_balancing_prev = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 1.0833, 0.5380, 0.4776, 0.5422, 1.3536, 0.8254, 0.9108, 0.5273, 0.0000, 0.5359), 
     array(0.0000, 0.9166, 0.0000, 0.9195, 0.6885, 0.7951, 1.2897, 0.8540, 0.9604, 0.4853, 0.0000, 1.0746), 
     array(0.0000, 1.0619, 1.0804, 0.0000, 0.9470, 1.0969, 1.1479, 0.9690, 0.8486, 0.9583, 0.0000, 1.2132), 
     array(0.0000, 1.1223, 1.3114, 1.0529, 0.0000, 0.4744, 1.1618, 1.3598, 0.9398, 0.5105, 0.0000, 1.1430), 
     array(0.0000, 1.0577, 1.2048, 0.9030, 1.1255, 0.0000, 1.2876, 1.1141, 0.9431, 0.9655, 0.0000, 0.6907), 
     array(0.0000, 0.6463, 0.7102, 0.8520, 0.4381, 0.7123, 0.0000, 0.6272, 0.8427, 0.6530, 0.0000, 0.8007), 
     array(0.0000, 1.1745, 1.1459, 1.0310, 0.6401, 0.8858, 1.3727, 0.0000, 0.9416, 0.8874, 0.0000, 0.8047), 
     array(0.0000, 1.0891, 1.0395, 1.1513, 1.0601, 1.0568, 1.1572, 1.0583, 0.0000, 0.8410, 0.0000, 0.7510), 
     array(0.0000, 1.0726, 1.1146, 1.0416, 1.0894, 1.0344, 1.3469, 1.1125, 1.1590, 0.0000, 0.0000, 1.1898), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 1.0641, 0.9253, 0.7867, 0.8569, 1.3092, 1.1992, 1.1952, 1.2489, 0.8102, 0.0000, 0.0000), 
);
$PVP_forced_balancing_slide = array(
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, -0.200, -0.200, -0.200, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, -0.200), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.200, -0.200, 0.0000, 0.0000, -0.200, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
     array(0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000), 
);/**/
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#	update war_balancer set c=0;
#	delete from war_balancer;
#	delete from war_balancer_t;
#	update war_balancer,war_balancer_t set war_balancer.c = war_balancer.c + war_balancer_t.c where war_balancer.a = war_balancer_t.a and war_balancer.v = war_balancer_t.v ;
#	select * from war_balancer where a in (2,4) and v in (2,4) and c!=0 group by a,v
#	select * from characters.war_balancer order by c desc

$split_coefficient=3;					//2 would mean that convert 50% imabness into dmg and 50% into defense, 1 means 100% defense, 100% attack
$max_adjustment_coef = 1.8;				//add max 2x dmg or dmg/2x defense
$anti_oscilation_error = 0;				//maybe put a 0.005 ?
$attacker_dmg_downscale_at = 1.4;		//better have non dieing players then insta kill ones
$attacker_dmg_downscale_val = 0.2;		//better have non dieing players then insta kill ones
for($a=1;$a<=11;$a++)
	for($v=$a+1;$v<=11;$v++)
		if( $war_table[$a][$v] != 0 && $war_table[$v][$a] != 0 && $a != $v )
		{
			$sum = $war_table[$a][$v] + $war_table[$v][$a];
			if( $sum / 5 > 10 )
			{
				$new = $war_table[$a][$v] / $sum;
				$for_echo_new = $new;
				
				$new = $new / $split_coefficient;			//because we use it to strengthen and to weaken at the same time. Half here half there
				$prev += -$PVP_forced_balancing_slide[$a][$v];	//slide to original value
				
				// !!!!!!! values are relative to previous forced balancing !!!!!!!!!
				$prev = $PVP_forced_balancing_prev[$a][$v];
				$prev += -$PVP_forced_balancing_slide[$a][$v];	//slide to original value
				//for some reason this is a new start
				if( $prev <= 0 )
				{
					$PVP_forced_balancing_slide[$a][$v] = 0;
					$prev = 1;
				}
					
				//new stats should be the old one updated with the new chances
				//calculate attacker damage reduction. If he has less then 50% winchance then we increase he's damage 
				//if he was winning more then 50% of the duels then we will 
				if( $new > 0.5 / $split_coefficient + $anti_oscilation_error )
					$new = 1 - ( $new - 0.5 / $split_coefficient );
				else if( $new < 0.5 / $split_coefficient - $anti_oscilation_error && $new != 0 )
					$new = 1 + ( 0.5 / $split_coefficient - $new );
				else
					$new = 1;	//to use previous values
					
				$next = $prev * $new;
			
				if( $next > $max_adjustment_coef )
					$nexta = $max_adjustment_coef;
				else if( $next < 2 - $max_adjustment_coef && $next != 0 )
					$nexta = 1/$max_adjustment_coef;
				else 
					$nexta = $next;
				
				if( $nexta + $PVP_forced_balancing_slide[$a][$v] >= $attacker_dmg_downscale_at )
					$PVP_forced_balancing_slide[$a][$v] -= $attacker_dmg_downscale_val;
				//predict the value before it happens
				if( 2 - $nexta + $PVP_forced_balancing_slide[$a][$v] >= $attacker_dmg_downscale_at )
					$PVP_forced_balancing_slide[$a][$v] -= $attacker_dmg_downscale_val;
				//there is no point to reduce both values below 1
				if( $nexta + $PVP_forced_balancing_slide[$a][$v] < 1 && 2 - $nexta + $PVP_forced_balancing_slide[$a][$v] < 1 )
					$PVP_forced_balancing_slide[$a][$v] += $attacker_dmg_downscale_val;
				
				/**/
//echo " $a - $v - $for_echo_new - $new - $prev - $next - $nexta<br>";

				$war_chances[$a][$v] = $nexta + $PVP_forced_balancing_slide[$a][$v];
				//and flip the value
				$war_chances[$v][$a] = 2 - $nexta + $PVP_forced_balancing_slide[$a][$v];

			}
			else
			{
				$war_chances[$a][$v] = $PVP_forced_balancing_prev[$a][$v] ;
				$war_chances[$v][$a] = $PVP_forced_balancing_prev[$v][$a] ;
			}
		}
		else
		{
			$war_chances[$a][$v] = $PVP_forced_balancing_prev[$a][$v] ;
			$war_chances[$v][$a] = $PVP_forced_balancing_prev[$v][$a] ;
		}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
$display_length = 7;
echo "This was used to generate previous statistics !!<br>";
echo "\$PVP_forced_balancing_old = array(<br>";
for($a=0;$a<=11;$a++)
{
	echo "&nbsp&nbsp&nbsp&nbsp array(";
	for($v=0;$v<=11;$v++)
	{
		$val_now = $PVP_forced_balancing_prev[$a][$v];	
		echo substr(FixedLengthFloat( $val_now, $display_length ),0,-1);
		if( $v==11 )
			echo "), <br>";
		else
			echo", ";
	}
}
echo ");<br>";
			
$class_names=array("none","warr","pala","hunter","rogue","priest","DK","shaman","mage","warlock","none","druid");
echo "//This is created with statitics data based on bugs found inside emu! Needs to be update periodically<br>";
echo "//attacker is index[0] and victim is index [1] => table[a][v] = chance to win the fight / 4 <br>";
echo "//X% of extra win chance of attacker is converted into victim defense<br>";
echo "//X% of extra loose chance of victim is converted into victim dmg<br>";
echo "//!!!values are relative to previous forced balancing !!<br>";
echo "float PVP_forced_balancing[12][12] = <br>";
echo "{<br>";
echo "//&nbsp&nbsp ";
for($i=0;$i<=11;$i++)
	echo FixedStrLen($class_names[$i],$display_length+1);
echo "<br>";
for($a=0;$a<=11;$a++)
{
	echo "&nbsp&nbsp&nbsp&nbsp{";
	for($v=0;$v<=11;$v++)
	{
		$val_now = $war_chances[$a][$v];	
		echo FixedLengthFloat( $val_now, $display_length );
		if( $v==11 )
			echo "}, // ${class_names[$a]}<br>";
		else
			echo", ";
	}
}
echo "};<br>";

echo "This will be required for generating next statistics !!<br>";
echo "\$PVP_forced_balancing_prev = array(<br>";
for($a=0;$a<=11;$a++)
{
	echo "&nbsp&nbsp&nbsp&nbsp array(";
	for($v=0;$v<=11;$v++)
	{
		$val_now = $war_chances[$a][$v];	
		echo substr(FixedLengthFloat( $val_now, $display_length ),0,-1);
		if( $v==11 )
			echo "), <br>";
		else
			echo", ";
	}
}
echo ");<br>";
echo "\$PVP_forced_balancing_slide = array(<br>";
for($a=0;$a<=11;$a++)
{
	echo "&nbsp&nbsp&nbsp&nbsp array(";
	for($v=0;$v<=11;$v++)
	{
		$val_now = $PVP_forced_balancing_slide[$a][$v];	
		echo substr(FixedLengthFloat( $val_now, $display_length ),0,-1);
		if( $v==11 )
			echo "), <br>";
		else
			echo", ";
	}
}
echo ");<br>";

echo "Just for a forum post in case anyone cares<br>";
echo "50% mean the 2 classes are perfectly balanced. Higher then 50% means overpowered class<br>";
for($i=1;$i<=11;$i++)
	if( $i != 10 )
		echo FixedStrLen($class_names[$i],$display_length);
echo "<BR>";
for($a=1;$a<=11;$a++)
	if( $a != 10 )
	{
		for($v=1;$v<=11;$v++)
			if( $v != 10 )
			{
				$sum = ($war_table[$a][$v] + $war_table[$v][$a])/1;
				if( $sum / 5 > 10 )
				{
					$new = $war_table[$a][$v] / $sum;
					$val_now = (int)($new * 100)."%";	
					if( $val_now == 0 )
						$val_now = "50%";
				}
				else
					$val_now = "??%";
				echo substr(FixedStrLen( $val_now, $display_length ),0,-1);
				if( $v==11 )
					echo " ${class_names[$a]}($a)<br>";
				else
					echo" ";
			}
	}

function FixedStrLen($str,$len)
{
	$ret = substr($str,0,$len);
	for($i=strlen($str);$i<$len;$i++)
		$ret.="&nbsp";
	$ret.=" ";
	return $ret;
}

function FixedLengthFloat($val,$len)
{
	if( $val == "" )
		$val = 0;
	//sorry we cannot make it longer
	if( strpos("@".$val,".") == 0 && strlen($val) > $len + 2 )
		return $val;
	//this is not float but int
	if( strpos("@".$val,".") == 0 )
		$val .= ".";
	//to much precision we pinch it off
	if( strlen($val) > $len - 1 )
		$val = substr( $val,0, $len - 1 );
	//too short ? add 0 at the end
	$len_now = strlen($val);
	for(;$len_now<$len-1;$len_now++)
		$val .= "0";
	//c++ style float :P
	$val .= "f";
	return $val;
}
?>

Just for a forum post in case anyone cares
50% mean the 2 classes are perfectly balanced. Higher then 50% means overpowered class
warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid  
50%     43%     52%     36%     58%     49%     53%     55%     48%     68%     warr
56%     50%     43%     42%     52%     49%     41%     49%     58%     94%     pala
47%     56%     50%     45%     60%     45%     58%     57%     100%    51%     hunter
63%     57%     54%     50%     52%     33%     47%     52%     67%     58%     rogue
41%     47%     40%     47%     50%     79%     40%     36%     39%     38%     priest
50%     50%     54%     66%     20%     50%     58%     51%     64%     64%     DK
46%     58%     41%     52%     59%     41%     50%     44%     59%     47%     shaman
44%     50%     42%     47%     63%     48%     55%     50%     68%     67%     mage
51%     41%     50%     32%     60%     35%     40%     31%     50%     81%     warlock
31%     5%      48%     41%     61%     35%     52%     32%     18%     50%     druid

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid  
50%     34%     15%     33%     22%     41%     47%     37%     31%     22%     warr
65%     50%     63%     53%     64%     45%     61%     43%     73%     64%     pala
84%     36%     50%     87%     30%     30%     42%     41%     100%    50%     hunter
66%     46%     12%     50%     70%     25%     50%     36%     66%     44%     rogue
77%     35%     70%     29%     50%     81%     22%     34%     66%     64%     priest
58%     54%     70%     74%     18%     50%     69%     46%     52%     50%     DK
52%     38%     57%     50%     77%     30%     50%     54%     40%     57%     shaman
62%     56%     58%     64%     65%     53%     45%     50%     64%     53%     mage
68%     26%     50%     33%     33%     47%     60%     35%     50%     66%     warlock
77%     35%     100%    55%     36%     50%     42%     46%     33%     50%     druid

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
50%     62%     33%     39%     50%     27%     46%     50%     25%     25%     warr
37%     50%     33%     50%     50%     45%     69%     57%     44%     36%     pala
66%     66%     50%     83%     83%     66%     40%     66%     50%     57%     hunter
60%     50%     16%     50%     33%     90%     42%     35%     33%     64%     rogue
50%     50%     16%     66%     50%     30%     75%     33%     40%     14%     priest
72%     54%     33%     9%      69%     50%     57%     44%     50%     63%     DK
54%     30%     60%     57%     25%     42%     50%     56%     27%     37%     shaman
50%     42%     33%     65%     66%     55%     43%     50%     50%     66%     mage
75%     55%     50%     66%     60%     50%     72%     50%     50%     66%     warlock
75%     63%     42%     35%     85%     36%     62%     33%     33%     50%     druid

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     30%     ??%     26%     18%     64%     52%     52%     50%     ??%     warr(1)
69%     ??%     ??%     45%     ??%     50%     48%     66%     ??%     ??%     pala(2)
??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     hunter(3)
73%     54%     ??%     ??%     13%     21%     35%     43%     ??%     ??%     rogue(4)
81%     ??%     ??%     86%     ??%     41%     ??%     ??%     66%     ??%     priest(5)
35%     50%     ??%     78%     58%     ??%     54%     37%     66%     ??%     DK(6)
47%     51%     ??%     64%     ??%     45%     ??%     62%     56%     ??%     shaman(7)
48%     33%     ??%     56%     ??%     62%     37%     ??%     53%     63%     mage(8)
50%     ??%     ??%     ??%     33%     33%     43%     46%     ??%     ??%     warlock(9)
??%     ??%     ??%     ??%     ??%     ??%     ??%     36%     ??%     ??%     druid(11)

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     34%     ??%     50%     75%     46%     40%     37%     ??%     ??%     warr(1)
65%     ??%     ??%     84%     ??%     46%     40%     ??%     ??%     47%     pala(2)
??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     ??%     hunter(3)
50%     15%     ??%     ??%     ??%     62%     31%     52%     ??%     34%     rogue(4)
25%     ??%     ??%     ??%     ??%     ??%     75%     ??%     64%     ??%     priest(5)
53%     53%     ??%     37%     ??%     ??%     37%     60%     ??%     ??%     DK(6)
60%     60%     ??%     68%     25%     62%     ??%     60%     63%     54%     shaman(7)
62%     ??%     ??%     47%     ??%     40%     40%     ??%     46%     ??%     mage(8)
??%     ??%     ??%     ??%     35%     ??%     36%     53%     ??%     ??%     warlock(9)
??%     52%     ??%     65%     ??%     ??%     45%     ??%     ??%     ??%     druid(11)

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     50%     ??%     20%     ??%     33%     33%     47%     ??%     13%     warr(1)
50%     ??%     ??%     57%     ??%     53%     ??%     61%     ??%     ??%     pala(2)
??%     ??%     ??%     ??%     26%     ??%     36%     ??%     ??%     ??%     hunter(3)
80%     42%     ??%     ??%     15%     56%     54%     81%     ??%     72%     rogue(4)
??%     ??%     73%     84%     ??%     ??%     31%     80%     ??%     ??%     priest(5)
66%     46%     ??%     43%     ??%     ??%     52%     64%     56%     62%     DK(6)
66%     ??%     64%     45%     68%     47%     ??%     36%     41%     28%     shaman(7)
52%     38%     ??%     18%     20%     35%     64%     ??%     43%     72%     mage(8)
??%     ??%     ??%     ??%     ??%     43%     58%     56%     ??%     42%     warlock(9)
86%     ??%     ??%     27%     ??%     37%     71%     27%     57%     ??%     druid(11)

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     49%     25%     40%     20%     38%     52%     59%     52%     15%     warr(1)
50%     ??%     50%     67%     57%     49%     50%     53%     33%     48%     pala(2)
75%     50%     ??%     54%     52%     51%     50%     40%     50%     19%     hunter(3)
60%     32%     45%     ??%     20%     55%     51%     51%     15%     25%     rogue(4)
80%     42%     48%     79%     ??%     46%     81%     42%     35%     45%     priest(5)
61%     50%     48%     44%     54%     ??%     56%     51%     50%     55%     DK(6)
47%     49%     50%     48%     18%     44%     ??%     47%     50%     50%     shaman(7)
40%     46%     59%     48%     57%     48%     52%     ??%     45%     51%     mage(8)
47%     66%     50%     84%     64%     49%     50%     54%     ??%     55%     warlock(9)
84%     51%     80%     75%     54%     44%     50%     48%     44%     ??%     druid(11)

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     54%     44%     74%     45%     43%     55%     52%     28%     28%     warr(1)
45%     ??%     50%     68%     71%     50%     39%     56%     22%     54%     pala(2)
55%     50%     ??%     61%     ??%     36%     43%     39%     62%     ??%     hunter(3)
25%     31%     38%     ??%     81%     25%     42%     40%     15%     39%     rogue(4)
54%     28%     ??%     18%     ??%     34%     52%     33%     ??%     41%     priest(5)
56%     50%     63%     74%     65%     ??%     50%     58%     68%     48%     DK(6)
44%     60%     56%     57%     47%     49%     ??%     47%     50%     58%     shaman(7)
47%     43%     60%     60%     66%     41%     52%     ??%     50%     76%     mage(8)
71%     77%     37%     85%     ??%     31%     50%     49%     ??%     45%     warlock(9)
71%     45%     ??%     60%     58%     51%     41%     23%     55%     ??%     druid(11)

warr    pala    hunter  rogue   priest  DK      shaman  mage    warlock druid   
??%     36%     60%     45%     58%     43%     54%     57%     27%     20%     warr(1)
63%     ??%     69%     73%     46%     45%     36%     54%     ??%     48%     pala(2)
40%     30%     ??%     55%     31%     48%     50%     ??%     ??%     34%     hunter(3)
55%     26%     44%     ??%     ??%     55%     39%     38%     54%     35%     rogue(4)
41%     53%     68%     ??%     ??%     42%     54%     35%     ??%     53%     priest(5)
56%     54%     52%     44%     57%     ??%     71%     43%     82%     57%     DK(6)
45%     63%     50%     60%     45%     28%     ??%     47%     52%     63%     shaman(7)
42%     45%     ??%     61%     64%     56%     52%     ??%     50%     56%     mage(8)
72%     ??%     ??%     45%     ??%     17%     47%     50%     ??%     50%     warlock(9)
80%     51%     65%     64%     46%     42%     36%     43%     50%     ??%     druid(11)